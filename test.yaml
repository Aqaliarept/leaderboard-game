---
# Source: leaderboard/templates/app.yml
kind: Namespace
apiVersion: v1
metadata:
  name: leaderboard
  labels:
    name: leaderboard
---
# Source: leaderboard/templates/app.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: leaderboard
  namespace: leaderboard
---
# Source: leaderboard/templates/redis.yml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis-pvc # Sets name of PVC
  namespace: leaderboard
  labels:
    app: redis
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  storageClassName: "local-path"
  accessModes:
    - ReadWriteOnce # Sets read and write access
  resources:
    requests:
      storage: 1Gi # Sets volume size
---
# Source: leaderboard/templates/app.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: leaderboard
  namespace: leaderboard
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
      - patch
---
# Source: leaderboard/templates/app.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: leaderboard
  namespace: leaderboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leaderboard
subjects:
  - kind: ServiceAccount
    name: leaderboard
---
# Source: leaderboard/templates/app.yml
apiVersion: v1
kind: Service
metadata:
  name: leaderboard-default
  namespace: leaderboard
spec:
  type: ClusterIP
  selector:
    app: leaderboard
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
---
# Source: leaderboard/templates/redis.yml
apiVersion: v1
kind: Service
metadata:
  name: redis # Sets service name
  namespace: leaderboard
  labels:
    app: redis # Labels and Selectors
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  type: ClusterIP # Sets service type
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
    - name: http
      port: 8001
---
# Source: leaderboard/templates/app.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: leaderboard
  namespace: leaderboard
  labels:
    app: leaderboard
spec:
  replicas: 3
  selector:
    matchLabels:
      app: leaderboard
  template:
    metadata:
      namespace: leaderboard
      labels:
        app: leaderboard
    spec:
      serviceAccountName: leaderboard
      containers:
        - name: leaderboard
          image: aqaliarept/leaderboard:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
          resources:
            limits:
              memory: 200Mi
            requests:
              memory: 200Mi
              cpu: 100m
          env:
            - name: COMPETITION_DURATION
              value: "200"
            - name: QUEUE_WAITING_TIMEOUT
              value: "30"
            - name: COMPETITION_SIZE
              value: "10"
            - name: MIN_COMPETITION_SIZE
              value: "2"
            - name: REDIS_CONNECTION
              value: redis://redis:6379
            - name: KUBE_ENV
              value: "TRUE"
            - name: PROTOHOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PROTOPORT
              value: "50051"
---
# Source: leaderboard/templates/redis.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis # Sets Deployment name
  namespace: leaderboard
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis/redis-stack-server:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: redis
              containerPort: 6379
            - name: http
              containerPort: 8001
          volumeMounts:
            - mountPath: /data
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Source: leaderboard/templates/app.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: leaderboard
  namespace: leaderboard
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  rules:
    - host: example.com
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: leaderboard-default
                port:
                  name: http
