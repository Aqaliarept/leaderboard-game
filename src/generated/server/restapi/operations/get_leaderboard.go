// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetLeaderboardHandlerFunc turns a function with the right signature into a get leaderboard handler
type GetLeaderboardHandlerFunc func(GetLeaderboardParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLeaderboardHandlerFunc) Handle(params GetLeaderboardParams) middleware.Responder {
	return fn(params)
}

// GetLeaderboardHandler interface for that can handle valid get leaderboard params
type GetLeaderboardHandler interface {
	Handle(GetLeaderboardParams) middleware.Responder
}

// NewGetLeaderboard creates a new http.Handler for the get leaderboard operation
func NewGetLeaderboard(ctx *middleware.Context, handler GetLeaderboardHandler) *GetLeaderboard {
	return &GetLeaderboard{Context: ctx, Handler: handler}
}

/*
	GetLeaderboard swagger:route GET /leaderboard/{leaderboard_id} getLeaderboard

# Get leaderboard by ID

Retrieve leaderboard data by leaderboard ID
*/
type GetLeaderboard struct {
	Context *middleware.Context
	Handler GetLeaderboardHandler
}

func (o *GetLeaderboard) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLeaderboardParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
