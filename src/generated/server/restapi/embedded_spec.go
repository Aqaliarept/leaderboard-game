// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for managing leaderboard entries and scores.",
    "title": "Leaderboard API",
    "version": "1.0.0"
  },
  "host": "localhost:9090",
  "basePath": "/",
  "paths": {
    "/leaderboard/join": {
      "post": {
        "description": "Endpoint to join a leaderboard using player_id",
        "summary": "Join leaderboard",
        "operationId": "join",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the player",
            "name": "player_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/leaderboard/player/{player_id}": {
      "get": {
        "description": "Retrieve leaderboard data for a specific player",
        "summary": "Get player's leaderboard",
        "operationId": "getPlayerLeaderboard",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the player",
            "name": "player_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LeaderboardResponse"
            }
          }
        }
      }
    },
    "/leaderboard/score": {
      "post": {
        "description": "Submit or update a player's score",
        "summary": "Submit player score",
        "operationId": "addScores",
        "parameters": [
          {
            "description": "Player score submission",
            "name": "score",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreSubmission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score updated"
          },
          "409": {
            "description": "Conflict, score not accepted"
          }
        }
      }
    },
    "/leaderboard/{leaderboard_id}": {
      "get": {
        "description": "Retrieve leaderboard data by leaderboard ID",
        "summary": "Get leaderboard by ID",
        "operationId": "getLeaderboard",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the leaderboard",
            "name": "leaderboard_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LeaderboardResponse"
            }
          },
          "404": {
            "description": "Leaderboard not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LeaderboardResponse": {
      "type": "object",
      "properties": {
        "ends_at": {
          "description": "Timestamp of leaderboard end",
          "type": "string",
          "format": "date-time"
        },
        "leaderboard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerScore"
          }
        },
        "leaderboard_id": {
          "description": "ID of the leaderboard",
          "type": "string"
        }
      }
    },
    "PlayerScore": {
      "type": "object",
      "required": [
        "player_id",
        "score"
      ],
      "properties": {
        "player_id": {
          "description": "ID of the player",
          "type": "string"
        },
        "score": {
          "description": "Player's score",
          "type": "integer"
        }
      }
    },
    "ScoreSubmission": {
      "type": "object",
      "required": [
        "player_id",
        "score"
      ],
      "properties": {
        "player_id": {
          "description": "ID of the player",
          "type": "string"
        },
        "score": {
          "description": "Score to be submitted",
          "type": "integer"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for managing leaderboard entries and scores.",
    "title": "Leaderboard API",
    "version": "1.0.0"
  },
  "host": "localhost:9090",
  "basePath": "/",
  "paths": {
    "/leaderboard/join": {
      "post": {
        "description": "Endpoint to join a leaderboard using player_id",
        "summary": "Join leaderboard",
        "operationId": "join",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the player",
            "name": "player_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/leaderboard/player/{player_id}": {
      "get": {
        "description": "Retrieve leaderboard data for a specific player",
        "summary": "Get player's leaderboard",
        "operationId": "getPlayerLeaderboard",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the player",
            "name": "player_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LeaderboardResponse"
            }
          }
        }
      }
    },
    "/leaderboard/score": {
      "post": {
        "description": "Submit or update a player's score",
        "summary": "Submit player score",
        "operationId": "addScores",
        "parameters": [
          {
            "description": "Player score submission",
            "name": "score",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScoreSubmission"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Score updated"
          },
          "409": {
            "description": "Conflict, score not accepted"
          }
        }
      }
    },
    "/leaderboard/{leaderboard_id}": {
      "get": {
        "description": "Retrieve leaderboard data by leaderboard ID",
        "summary": "Get leaderboard by ID",
        "operationId": "getLeaderboard",
        "parameters": [
          {
            "type": "string",
            "description": "ID of the leaderboard",
            "name": "leaderboard_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LeaderboardResponse"
            }
          },
          "404": {
            "description": "Leaderboard not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LeaderboardResponse": {
      "type": "object",
      "properties": {
        "ends_at": {
          "description": "Timestamp of leaderboard end",
          "type": "string",
          "format": "date-time"
        },
        "leaderboard": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlayerScore"
          }
        },
        "leaderboard_id": {
          "description": "ID of the leaderboard",
          "type": "string"
        }
      }
    },
    "PlayerScore": {
      "type": "object",
      "required": [
        "player_id",
        "score"
      ],
      "properties": {
        "player_id": {
          "description": "ID of the player",
          "type": "string"
        },
        "score": {
          "description": "Player's score",
          "type": "integer"
        }
      }
    },
    "ScoreSubmission": {
      "type": "object",
      "required": [
        "player_id",
        "score"
      ],
      "properties": {
        "player_id": {
          "description": "ID of the player",
          "type": "string"
        },
        "score": {
          "description": "Score to be submitted",
          "type": "integer"
        }
      }
    }
  }
}`))
}
